import tkinter as tk
from tkinter import messagebox
from db_operations import add_user, find_user, add_post, get_posts, delete_post

class BlogPlatformGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Blog Platform")
        print("Initializing Blog Platform GUI...")  # Debugging statement
        
        self.current_user = None  # To store current logged-in user information

        self.create_widgets()

    def create_widgets(self):
        self.login_frame = tk.Frame(self.root)
        self.register_frame = tk.Frame(self.root)
        self.home_frame = tk.Frame(self.root)
        self.post_frame = tk.Frame(self.root)

        self.show_login_frame()

    def show_login_frame(self):
        self.clear_frame()
        tk.Label(self.login_frame, text="Login", font=("Helvetica", 16)).pack()
        tk.Label(self.login_frame, text="Email", font=("Helvetica", 12)).pack()
        self.email_entry = tk.Entry(self.login_frame, font=("Helvetica", 12), width=30)
        self.email_entry.pack()
        tk.Label(self.login_frame, text="Password", font=("Helvetica", 12)).pack()
        self.password_entry = tk.Entry(self.login_frame, show='*', font=("Helvetica", 12), width=30)
        self.password_entry.pack()
        tk.Button(self.login_frame, text="Login", command=self.login, font=("Helvetica", 12)).pack()
        tk.Button(self.login_frame, text="Register", command=self.show_register_frame, font=("Helvetica", 12)).pack()
        self.login_frame.pack(padx=20, pady=20)

    def show_register_frame(self):
        self.clear_frame()
        tk.Label(self.register_frame, text="Register", font=("Helvetica", 16)).pack()
        tk.Label(self.register_frame, text="Username", font=("Helvetica", 12)).pack()
        self.username_entry = tk.Entry(self.register_frame, font=("Helvetica", 12), width=30)
        self.username_entry.pack()
        tk.Label(self.register_frame, text="Email", font=("Helvetica", 12)).pack()
        self.reg_email_entry = tk.Entry(self.register_frame, font=("Helvetica", 12), width=30)
        self.reg_email_entry.pack()
        tk.Label(self.register_frame, text="Password", font=("Helvetica", 12)).pack()
        self.reg_password_entry = tk.Entry(self.register_frame, show='*', font=("Helvetica", 12), width=30)
        self.reg_password_entry.pack()
        tk.Button(self.register_frame, text="Register", command=self.register, font=("Helvetica", 12)).pack()
        tk.Button(self.register_frame, text="Back to Login", command=self.show_login_frame, font=("Helvetica", 12)).pack()
        self.register_frame.pack(padx=20, pady=20)

    def show_home_frame(self):
        self.clear_frame()
        tk.Label(self.home_frame, text="Home", font=("Helvetica", 16)).pack()
        tk.Button(self.home_frame, text="Create Post", command=self.show_post_frame, font=("Helvetica", 12)).pack()
        posts = get_posts()
        for post in posts:
            tk.Label(self.home_frame, text=post['title'], font=("Helvetica", 14, "bold")).pack()
            tk.Label(self.home_frame, text=post['content'], font=("Helvetica", 12)).pack()
            tk.Label(self.home_frame, text=f"By {post['author']} on {post['date_posted'].strftime('%Y-%m-%d')}", font=("Helvetica", 10, "italic")).pack()
            if self.current_user and post['author'] == self.current_user['username']:
                delete_btn = tk.Button(self.home_frame, text="Delete", command=lambda post_id=post['_id']: self.delete_post(post_id), font=("Helvetica", 10, "bold"), fg="red")
                delete_btn.pack()
        tk.Button(self.home_frame, text="Logout", command=self.show_login_frame, font=("Helvetica", 12)).pack()
        self.home_frame.pack(padx=20, pady=20)

    def show_post_frame(self):
        self.clear_frame()
        tk.Label(self.post_frame, text="Create Post", font=("Helvetica", 16)).pack()
        tk.Label(self.post_frame, text="Title", font=("Helvetica", 12)).pack()
        self.title_entry = tk.Entry(self.post_frame, font=("Helvetica", 12), width=50)
        self.title_entry.pack()
        tk.Label(self.post_frame, text="Content", font=("Helvetica", 12)).pack()
        self.content_entry = tk.Text(self.post_frame, font=("Helvetica", 12), height=10, width=50)
        self.content_entry.pack()
        tk.Button(self.post_frame, text="Post", command=self.create_post, font=("Helvetica", 12)).pack()
        tk.Button(self.post_frame, text="Back to Home", command=self.show_home_frame, font=("Helvetica", 12)).pack()
        self.post_frame.pack(padx=20, pady=20)

    def clear_frame(self):
        for frame in [self.login_frame, self.register_frame, self.home_frame, self.post_frame]:
            for widget in frame.winfo_children():
                widget.destroy()
            frame.pack_forget()

    def login(self):
        email = self.email_entry.get()
        password = self.password_entry.get()
        print(f"Attempting to log in with email: {email}")  # Debugging statement
        user = find_user(email)
        if user and user['password'] == password:
            self.current_user = user  # Store the logged-in user information
            messagebox.showinfo("Login", "Login successful!")
            self.show_home_frame()
        else:
            messagebox.showerror("Login", "Invalid email or password")

    def register(self):
        username = self.username_entry.get()
        email = self.reg_email_entry.get()
        password = self.reg_password_entry.get()
        print(f"Registering user with email: {email}")  # Debugging statement
        add_user(username, email, password)
        messagebox.showinfo("Register", "Account created!")
        self.show_login_frame()

    def create_post(self):
        title = self.title_entry.get()
        content = self.content_entry.get("1.0", tk.END)
        
        if self.current_user:
            author = self.current_user['username']  # Use the username of the current user
            print(f"Creating post with title: {title}")  # Debugging statement
            add_post(title, content, author)
            messagebox.showinfo("Post", "Post created!")
            self.show_home_frame()
        else:
            messagebox.showerror("Post", "Please log in to create a post")

    def delete_post(self, post_id):
        if self.current_user:
            delete_post(post_id)
            messagebox.showinfo("Delete Post", "Post deleted successfully!")
            self.show_home_frame()
        else:
            messagebox.showerror("Delete Post", "Please log in to delete a post")

if __name__ == "__main__":
    print("Starting Blog Platform...")  # Debugging statement
    root = tk.Tk()
    root.geometry("800x600")  # Set initial window size
    app = BlogPlatformGUI(root)
    root.mainloop()
